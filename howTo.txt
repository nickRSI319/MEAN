=Setup your environment=
-Github

-Docker Toolkit. This package comes with kinematic (a tool to create instances of docker repos), a custom VirtualBox install for hosting docker instances, and a docker terminal. Docker terminal comes with a bash terminal which also has npm. You will need npm. NOTE:WARNING - You cannot use normal VirtualBox installations or images on the same machine as Docker Toolkit. This will automatically uninstall any other VirtualBox you may have.

-Node

some text editor/dev environment
	I started with just Notepadd++ for this project
	Visual Studio Code or Community are also freely available


- a Github account
- a Docker Swarm account

clone https://github.com/nickRSI319/MEAN.git
Open Docker Terminal
login to docker on your machine:
	docker login
	**if a docker command ever errors out saying "unauthorized", rerun "docker login"
navigate to the directory where you cloned the repo:
	cd X:\path\to\your\copy
install node & express by navigating into the Node-Express file:
	cd ./Node-Express
then install the dependecies:
	npm install
navigate back to the root project folder:
	cd ..
run docker compose:
	docker-compose up
lots of things will start running across the terminal
and if all goes well you'll read "waiting for connections on port XYZ"

visit localhost:8081 in your favorite browser and you should see a little webpage!

if all does not go well take a screen shot of the error, google it, keep a record of the results you visit, the solution, and include this in
the documentation.

You're all setup, hmMmm!

type Ctrl+C once to nicely stop the docker-compose script
type Ctrl+C twice to force stop it


====Start Developing Node/Express/Anguar====
after setting up your environment and stopping the compose script 

=Build and Run a Mongo Docker Image=
in order to run this project without using docker-compose, 
you will need to build and run a docker mongo image yourself
open docker terminal and navigate to the root project folder
build a docker image from the existing Mongo/dockerfile:
	docker build -t imongo ./Mongo/
run the docker image you just built and expose a port for it:
	docker run -p ExternalPortNumber:27017 imongo
note that the Mongo/dockerfile does not expose/map a port. 
it can be done in the dockerfile, but we will do this in the docker-compose file or the command line

=Run Node app=
open docker terminal and navigate to the MEAN/Node-Express project folder
run the node application:
	node index.js 
the default behavior is currently using EJS, but you can pass arguments
to specify the front end type:
	node index.js ejs
	node index.js ang


so far A very simple read/write form has been wired up to a mongo database using EJS


====Start Developing Mongo=====
not yet, for now all of the Mongo work is handled with Docker and Node.
there will be more mongo specific work done later to setup persistent users, permissions, and other admin tasks
within Mongo itself, but for now we'll do that programmatically with Node
for now we're going to let Docker handle the 'details' of our mongo instance. 
we're just going to grab the latest mongo image and map its exposed port


=====Start Developing Angular====
this facet still needs to be installed and configured! currently the app is using EJS as a template engine
Nick is working on this


==========run docker image==========
run docker image:
docker run -p <extPort>:<intPort> <image name>

run a docker image with a port mapping:
docker run -p <extPort>:<intPort> <image name>

after starting an image you may need to run to update for new IP addresses:
docker-machine env

========docker compose============
create a docker compose file if you need to coordinate multiple dockerfiles. call it docker-compose.yml. the compose file allows you to run several docker instances with one command. 

Compose is Great for testing and deployments. It may also be used during development, but you cannot run the docker image you are developing.

once youve created a docker compose YAML in the directory of your compose file run:
docker-compose up 

and this will execute the local docker-compose.yml


=====What has been done so far======
==built a new project from scratch==

open the Docker Quickstart (bash) terminal
create app structure with terminal or windows explorer
to init the app structure run:
npm init

use npm to install dependencies:
npm install

======DOCKER=====
create a dockerfile the contains the following or something similar
	FROM node:8
		//use an existing base repo for consistency
	WORKDIR /app
		//specifiy the location of you app in the docker container
	COPY package.json /app
		//copy node package there
	RUN npm install
		//install dependecies
	COPY . /app
		//copy your app there
	CMD node index.js
		//tell docker what command to run when executing this docker repo
	EXPOSE 8082
		//tell docker what port to use to interact

========create a docker image============		
create a docker image:
docker build -t <specify a docker image label> <path to the docker file>

